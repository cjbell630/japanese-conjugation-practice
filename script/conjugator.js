// this code originally sourced from one of my other projects in a private repository.
// Originally written in Python.

//TODO: maybe reformat the verbs json file to group by type instead of having tos specify each time
// also what about automatic types like a verb ends in xxx it's xxx type?

const VOWEL_GROUPS = {
    "„ÅÇ": ["„ÅÇ", "„Åã", "„Åå", "„Åï", "„Åñ", "„Åü", "„Å†", "„Å™", "„ÅØ", "„Å∞", "„Å±", "„Åæ", "„ÇÑ", "„Çâ", "„Çè"],
    "„ÅÑ": ["„ÅÑ", "„Åç", "„Åé", "„Åó", "„Åò", "„Å°", "„Å¢", "„Å´", "„Å≤", "„Å≥", "„Å¥", "„Åø", "õÄÜ", "„Çä", "„Çê"],
    "„ÅÜ": ["„ÅÜ", "„Åè", "„Åê", "„Åô", "„Åö", "„Å§", "„Å•", "„Å¨", "„Åµ", "„Å∂", "„Å∑", "„ÇÄ", "„ÇÜ", "„Çã", "wu"],
    "„Åà": ["„Åà", "„Åë", "„Åí", "„Åõ", "„Åú", "„Å¶", "„Åß", "„Å≠", "„Å∏", "„Åπ", "„Å∫", "„ÇÅ", "õÄÅ", "„Çå", "„Çë"],
    "„Åä": ["„Åä", "„Åì", "„Åî", "„Åù", "„Åû", "„Å®", "„Å©", "„ÅÆ", "„Åª", "„Åº", "„ÅΩ", "„ÇÇ", "„Çà", "„Çç", "„Çí"]
}

//patterns is dict
function conjugateFromPatterns(patterns) {

}

//works the same as the python version
//TODO: documentation
//TODO: clean
function getPatternsDictForWord(word, identification) {
    identification = "base." + identification;
    let patterns = { // dict
        "word": "+" + word
    }
    let level = 0;
    let paths = identification.split(".");
    console.log(paths);
    while (level < paths.length) {
        let levelName = paths[level];
        Object.keys(JSON_CONTENTS["verbs"][levelName]["vars"]).forEach(varName => {
            //TODO: this just copies a dict into another dict, can be done cleaner
            patterns[varName] = JSON_CONTENTS["verbs"][levelName]["vars"][varName];
        });
        Object.keys(JSON_CONTENTS["verbs"][levelName]["regular"]).forEach(formName => {
            //TODO: this just copies a dict into another dict, can be done cleaner
            patterns[formName] = Object.keys(patterns).includes(formName) ?
                merge(patterns[formName], JSON_CONTENTS["verbs"][levelName]["regular"][formName]) :
                JSON_CONTENTS["verbs"][levelName]["regular"][formName];
        });

        console.log(levelName);
        console.log(level);
        console.log(paths[level + 1]);
        //console.log(paths[level + 1] in Object.keys(JSON_CONTENTS["verbs"][levelName]["exceptions"]))
        if (level + 1 < paths.length &&
            Object.keys(JSON_CONTENTS["verbs"][levelName]["exceptions"]).includes(paths[level + 1])) {
            console.log("exception");
            level++;
            Object.keys(JSON_CONTENTS["verbs"][levelName]["exceptions"][paths[level]]).forEach(formName => {
                patterns[formName] = Object.keys(patterns).includes(formName) ?
                    merge(patterns[formName], JSON_CONTENTS["verbs"][levelName]["exceptions"][paths[level]][formName]) :
                    JSON_CONTENTS["verbs"][levelName]["exceptions"][paths[level]][formName];
            });
        }
        console.log(patterns);

        level++;
    }
    console.log(patterns);
}

getPatternsDictForWord("Êàê„Çã", "„ÅÜ.„Å§„Çã");

function conjugateWord(word, identification) {
    return conjugateFromPatterns(getPatternsDictForWord(word, identification));
}